{"config":{"indexing":"full","lang":["en","pt"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;"},"docs":[{"location":"","text":"Crazyarena Repository This repository makes use of the CrazyS and Crazyswarm packages as well as the cfclient to provide a starting point for running simulations and real experiments using one or more Crazyflies. The crazyarena repository makes use of docker to simplify the installation procedure. Prerequesites Make sure you have docker properly installed before continuing, official instalation instructions are available here . It is also recommended that you visit the documentation for CrazyS and Crazyswarm .","title":"Introduction"},{"location":"#crazyarena-repository","text":"This repository makes use of the CrazyS and Crazyswarm packages as well as the cfclient to provide a starting point for running simulations and real experiments using one or more Crazyflies. The crazyarena repository makes use of docker to simplify the installation procedure.","title":"Crazyarena Repository"},{"location":"#prerequesites","text":"Make sure you have docker properly installed before continuing, official instalation instructions are available here . It is also recommended that you visit the documentation for CrazyS and Crazyswarm .","title":"Prerequesites"},{"location":"common_errors/","text":"Common errors If you encouter the issue ModuleNotFoundError: No module named 'crazyswarm' while running a real experiment using the crazyswarm package, add these lines in the begining of the crazyflie.py file. # /home/crazyuser/crazyswarm/ros_ws/src/crazyswarm/scripts/pycrazyswarm/crazyflie.py from os.path import dirname , abspath sys . path . insert ( 0 , dirname ( dirname ( dirname ( abspath ( __file__ )))))","title":"Common Errors"},{"location":"common_errors/#common-errors","text":"If you encouter the issue ModuleNotFoundError: No module named 'crazyswarm' while running a real experiment using the crazyswarm package, add these lines in the begining of the crazyflie.py file. # /home/crazyuser/crazyswarm/ros_ws/src/crazyswarm/scripts/pycrazyswarm/crazyflie.py from os.path import dirname , abspath sys . path . insert ( 0 , dirname ( dirname ( dirname ( abspath ( __file__ )))))","title":"Common errors"},{"location":"docker/","text":"Dealing with docker containers If for some reason you need to stop or start the container the following commands might be helpful. docker stop crazyarena docker start crazyarena If you need privileged access to the container you can open a new shell with the root user: docker exec -it -u root crazyarena bash","title":"Docker Containers"},{"location":"docker/#dealing-with-docker-containers","text":"If for some reason you need to stop or start the container the following commands might be helpful. docker stop crazyarena docker start crazyarena If you need privileged access to the container you can open a new shell with the root user: docker exec -it -u root crazyarena bash","title":"Dealing with docker containers"},{"location":"install_guide/","text":"Installation Instructions Start by cloning this repository. git clone https://github.com/hardtekpt/crazyarena cd crazyarena A script is provided to install the crazyarena. The build flag -b can be used to build the image in adition to creating the container. This flag takes an argument regarding the base image to use. If you have an nvidia gpu then use the cuda image as it contains the nvidia drivers, otherwise use the base image. Note When using the cuda image, it is necessary to install the NVIDIA Container Toolkit on the host machine. The NVIDIA Container Toolkit allows users to build and run GPU accelerated containers using container engines such as Docker. ./run_crazyarena.bash -b <base,cuda> After the installation is complete it is possible to start the crazyarena container and open a shell inside. docker start crazyarena docker exec -it crazyarena bash Moreover both the CrazyS and Crazyswarm workspaces are available outside the container using docker volumes making it easy to edit files inside them. These volumes are mapped to the crazyarena repository folder. The repository also includes a convenience script to remove the container, image and volumes from docker. Note If you are using this script as middle step to fix your installation don't forget to delete the catkin_ws and crazyswarm folders before installing again. ./rm_crazyarena.bash Warning Make sure you only make changes to the contents of the volumes (catkin_ws and crazyswarm folders) while the container is running, otherwise the changes are not persistent and you may loose them.","title":"Install Guide"},{"location":"install_guide/#installation-instructions","text":"Start by cloning this repository. git clone https://github.com/hardtekpt/crazyarena cd crazyarena A script is provided to install the crazyarena. The build flag -b can be used to build the image in adition to creating the container. This flag takes an argument regarding the base image to use. If you have an nvidia gpu then use the cuda image as it contains the nvidia drivers, otherwise use the base image. Note When using the cuda image, it is necessary to install the NVIDIA Container Toolkit on the host machine. The NVIDIA Container Toolkit allows users to build and run GPU accelerated containers using container engines such as Docker. ./run_crazyarena.bash -b <base,cuda> After the installation is complete it is possible to start the crazyarena container and open a shell inside. docker start crazyarena docker exec -it crazyarena bash Moreover both the CrazyS and Crazyswarm workspaces are available outside the container using docker volumes making it easy to edit files inside them. These volumes are mapped to the crazyarena repository folder. The repository also includes a convenience script to remove the container, image and volumes from docker. Note If you are using this script as middle step to fix your installation don't forget to delete the catkin_ws and crazyswarm folders before installing again. ./rm_crazyarena.bash Warning Make sure you only make changes to the contents of the volumes (catkin_ws and crazyswarm folders) while the container is running, otherwise the changes are not persistent and you may loose them.","title":"Installation Instructions"},{"location":"repo_structure/","text":"Repository Structure This repository consists of two Dockerfiles along with two scripts: Dockerfile-base-cuda : A dockerfile which installs the nvidia drivers on top of the base image; Dockerfile : A dockerfile which installs the CrazyS , Crazyswarm and cfclient packages; run_crazyarena.bash : A bash script to create the crazyarena docker container as well as to build the images needed. rm_crazyarena.bash : A bash script to remove the installation of the crazyarena docker container as well as to remove the images and volumes created.","title":"Repository Structure"},{"location":"repo_structure/#repository-structure","text":"This repository consists of two Dockerfiles along with two scripts: Dockerfile-base-cuda : A dockerfile which installs the nvidia drivers on top of the base image; Dockerfile : A dockerfile which installs the CrazyS , Crazyswarm and cfclient packages; run_crazyarena.bash : A bash script to create the crazyarena docker container as well as to build the images needed. rm_crazyarena.bash : A bash script to remove the installation of the crazyarena docker container as well as to remove the images and volumes created.","title":"Repository Structure"},{"location":"examples/hello_world/crazys/","text":"This simulation uses the CrazyS hovering example code to demonstrate how the simulation process using the CrazyS package works. To begin with let's create a cpp ros package: cd /home/crazyuser/catkin_ws/src/ catkin_create_pkg hello_world Now enter the package and create the script where the hovering example code will go: cd hello_world mkdir src launch cd src touch hovering_example.cpp Following that, create the launch file that runs the simulation cd ../launch touch hovering_example.launch After creating the package and setting up the file structure open the files in a text editor. hovering_example.cpp Copy the contents of the catkin_ws/src/CrazyS/rotors_gazebo/src/nodes/hovering_example.cpp file to this file as no modifications are needed for this example. package.xml Fill in the package.xml file as shown to include all the libraries needed. The contents of this file are based on the hovering example package provided by the CrazyS package. <package> <name> rotors_gazebo </name> <version> 7.0.1 </version> <description> The rotors_gazebo package </description> <maintainer email= \"giuseppe.silano@fel.cvut.cz\" > Giuseppe Silano </maintainer> <maintainer email= \"luigi.iannelli@unisannio.it\" > Luigi Iannelli </maintainer> <author> Giuseppe Silano </author> <author> Emanuele Aucone </author> <author> Benjamin Rodriguez </author> <author> Luigi Iannelli </author> <author> Ria Sonecha </author> <author> Daniele Morra </author> <license> ASL 2.0 </license> <url type= \"website\" > https://github.com/gsilano/CrazyS </url> <url type= \"bugtracker\" > https://github.com/gsilano/CrazyS/issues </url> <buildtool_depend> catkin </buildtool_depend> <!-- Dependencies needed to compile this package. --> <build_depend> gazebo_plugins </build_depend> <build_depend> rotors_gazebo_plugins </build_depend> <build_depend> mav_msgs </build_depend> <build_depend> nav_msgs </build_depend> <build_depend> gazebo_msgs </build_depend> <build_depend> geometry_msgs </build_depend> <build_depend> roscpp </build_depend> <build_depend> sensor_msgs </build_depend> <build_depend> cmake_modules </build_depend> <build_depend> tf </build_depend> <build_depend> tf2 </build_depend> <!-- Dependencies needed after this package is compiled. --> <run_depend> gazebo_plugins </run_depend> <run_depend> dynamic_reconfigure </run_depend> <run_depend> rotors_gazebo_plugins </run_depend> <run_depend> mav_msgs </run_depend> <run_depend> nav_msgs </run_depend> <run_depend> gazebo_msgs </run_depend> <run_depend> geometry_msgs </run_depend> <run_depend> roscpp </run_depend> <run_depend> sensor_msgs </run_depend> <run_depend> tf </run_depend> <run_depend> tf2 </run_depend> </package> CMakeLists.txt Finally, fill in the CMakeLists.txt file as shown to include all the libraries needed: cmake_minimum_required ( VERSION 3.0.2 ) project ( hello_world ) add_definitions ( -std=c++11 ) find_package ( catkin REQUIRED COMPONENTS mav_msgs roscpp cmake_modules ) find_package ( Eigen3 REQUIRED ) catkin_package ( INCLUDE_DIRS ${ Eigen3_INCLUDE_DIRS } LIBRARIES spline_trajectory_generator CATKIN_DEPENDS geometry_msgs mav_msgs nav_msgs roscpp sensor_msgs gazebo_msgs DEPENDS Eigen3 ) include_directories ( ${ catkin_INCLUDE_DIRS } ${ Eigen3_INCLUDE_DIRS } ) add_executable ( hovering_example src/hovering_example.cpp ) target_link_libraries ( hovering_example ${ catkin_LIBRARIES } ) add_dependencies ( hovering_example ${ catkin_EXPORTED_TARGETS } ) foreach ( dir launch models resource worlds ) install ( DIRECTORY ${ dir } / DESTINATION ${ CATKIN_PACKAGE_SHARE_DESTINATION } / ${ dir } ) endforeach ( dir ) install ( TARGETS hovering_example ARCHIVE DESTINATION ${ CATKIN_PACKAGE_LIB_DESTINATION } LIBRARY DESTINATION ${ CATKIN_PACKAGE_LIB_DESTINATION } RUNTIME DESTINATION ${ CATKIN_PACKAGE_BIN_DESTINATION } ) install ( DIRECTORY include/ ${ PROJECT_NAME } / DESTINATION ${ CATKIN_PACKAGE_INCLUDE_DESTINATION } FILES_MATCHING PATTERN \"*.h\" ) Running the simulation Before running the simulation the package must be build. To do this navigate to the catkin_ws folder and run the command catkin build . After this the new built workspace must be sourced. To do this run the command source devel/setup.bash . Now the simulation can be launched by running roslaunch hello_world hovering_example.launch . You should see the gazebo gui launch and an instance of the crazyflie vehicle spawn. The simulation only performs a simple takeoff and hover.","title":"CrazyS"},{"location":"examples/hello_world/crazys/#hovering_examplecpp","text":"Copy the contents of the catkin_ws/src/CrazyS/rotors_gazebo/src/nodes/hovering_example.cpp file to this file as no modifications are needed for this example.","title":"hovering_example.cpp"},{"location":"examples/hello_world/crazys/#packagexml","text":"Fill in the package.xml file as shown to include all the libraries needed. The contents of this file are based on the hovering example package provided by the CrazyS package. <package> <name> rotors_gazebo </name> <version> 7.0.1 </version> <description> The rotors_gazebo package </description> <maintainer email= \"giuseppe.silano@fel.cvut.cz\" > Giuseppe Silano </maintainer> <maintainer email= \"luigi.iannelli@unisannio.it\" > Luigi Iannelli </maintainer> <author> Giuseppe Silano </author> <author> Emanuele Aucone </author> <author> Benjamin Rodriguez </author> <author> Luigi Iannelli </author> <author> Ria Sonecha </author> <author> Daniele Morra </author> <license> ASL 2.0 </license> <url type= \"website\" > https://github.com/gsilano/CrazyS </url> <url type= \"bugtracker\" > https://github.com/gsilano/CrazyS/issues </url> <buildtool_depend> catkin </buildtool_depend> <!-- Dependencies needed to compile this package. --> <build_depend> gazebo_plugins </build_depend> <build_depend> rotors_gazebo_plugins </build_depend> <build_depend> mav_msgs </build_depend> <build_depend> nav_msgs </build_depend> <build_depend> gazebo_msgs </build_depend> <build_depend> geometry_msgs </build_depend> <build_depend> roscpp </build_depend> <build_depend> sensor_msgs </build_depend> <build_depend> cmake_modules </build_depend> <build_depend> tf </build_depend> <build_depend> tf2 </build_depend> <!-- Dependencies needed after this package is compiled. --> <run_depend> gazebo_plugins </run_depend> <run_depend> dynamic_reconfigure </run_depend> <run_depend> rotors_gazebo_plugins </run_depend> <run_depend> mav_msgs </run_depend> <run_depend> nav_msgs </run_depend> <run_depend> gazebo_msgs </run_depend> <run_depend> geometry_msgs </run_depend> <run_depend> roscpp </run_depend> <run_depend> sensor_msgs </run_depend> <run_depend> tf </run_depend> <run_depend> tf2 </run_depend> </package>","title":"package.xml"},{"location":"examples/hello_world/crazys/#cmakeliststxt","text":"Finally, fill in the CMakeLists.txt file as shown to include all the libraries needed: cmake_minimum_required ( VERSION 3.0.2 ) project ( hello_world ) add_definitions ( -std=c++11 ) find_package ( catkin REQUIRED COMPONENTS mav_msgs roscpp cmake_modules ) find_package ( Eigen3 REQUIRED ) catkin_package ( INCLUDE_DIRS ${ Eigen3_INCLUDE_DIRS } LIBRARIES spline_trajectory_generator CATKIN_DEPENDS geometry_msgs mav_msgs nav_msgs roscpp sensor_msgs gazebo_msgs DEPENDS Eigen3 ) include_directories ( ${ catkin_INCLUDE_DIRS } ${ Eigen3_INCLUDE_DIRS } ) add_executable ( hovering_example src/hovering_example.cpp ) target_link_libraries ( hovering_example ${ catkin_LIBRARIES } ) add_dependencies ( hovering_example ${ catkin_EXPORTED_TARGETS } ) foreach ( dir launch models resource worlds ) install ( DIRECTORY ${ dir } / DESTINATION ${ CATKIN_PACKAGE_SHARE_DESTINATION } / ${ dir } ) endforeach ( dir ) install ( TARGETS hovering_example ARCHIVE DESTINATION ${ CATKIN_PACKAGE_LIB_DESTINATION } LIBRARY DESTINATION ${ CATKIN_PACKAGE_LIB_DESTINATION } RUNTIME DESTINATION ${ CATKIN_PACKAGE_BIN_DESTINATION } ) install ( DIRECTORY include/ ${ PROJECT_NAME } / DESTINATION ${ CATKIN_PACKAGE_INCLUDE_DESTINATION } FILES_MATCHING PATTERN \"*.h\" )","title":"CMakeLists.txt"},{"location":"examples/hello_world/crazys/#running-the-simulation","text":"Before running the simulation the package must be build. To do this navigate to the catkin_ws folder and run the command catkin build . After this the new built workspace must be sourced. To do this run the command source devel/setup.bash . Now the simulation can be launched by running roslaunch hello_world hovering_example.launch . You should see the gazebo gui launch and an instance of the crazyflie vehicle spawn. The simulation only performs a simple takeoff and hover.","title":"Running the simulation"},{"location":"examples/hello_world/crazyswarm/","text":"This simulation makes use of the Crazyswarm package to run a simulation where a single crazyflie takes-off, hovers and lands. First we need to create a package. Navigate to the crazyswarm workspace and run the following commands to create the files needed. cd crazyswarm/ros_ws/src mkdir -p hello_world/scripts cd hello_world mkdir launch touch package.xml touch CMakeLists.txt cd scripts touch hello_world.py cd ../launch touch crazyflies.yaml Now open this folder and edit the files created according to the following instructions. package.xml Copy this into the package.xml file to include the needed libraries. <?xml version=\"1.0\"?> <package format= \"2\" > <name> hello_world </name> <version> 0.0.0 </version> <description> The hello_world package </description> <!-- One maintainer tag required, multiple allowed, one person per tag --> <!-- Example: --> <!-- <maintainer email=\"jane.doe@example.com\">Jane Doe</maintainer> --> <maintainer email= \"crazyuser@todo.todo\" > crazyuser </maintainer> <!-- One license tag required, multiple allowed, one license per tag --> <!-- Commonly used license strings: --> <!-- BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --> <license> TODO </license> <build_depend> message_generation </build_depend> <exec_depend> message_runtime </exec_depend> <buildtool_depend> catkin </buildtool_depend> <build_depend> rospy </build_depend> <build_depend> std_msgs </build_depend> <build_depend> geometry_msgs </build_depend> <build_depend> rosgraph_msgs </build_depend> <build_depend> vizualization_msgs </build_depend> <build_depend> crazyswarm </build_depend> <build_export_depend> rospy </build_export_depend> <build_export_depend> std_msgs </build_export_depend> <exec_depend> rospy </exec_depend> <exec_depend> std_msgs </exec_depend> <exec_depend> geometry_msgs </exec_depend> <exec_depend> rosgraph_msgs </exec_depend> <exec_depend> vizualization_msgs </exec_depend> <exec_depend> crazyswarm </exec_depend> </package> CMakeLists.txt Copy this into the CMakeLists.txt file to include the needed libraries. cmake_minimum_required ( VERSION 3.0.2 ) project ( hello_world ) find_package ( catkin REQUIRED COMPONENTS rospy std_msgs geometry_msgs rosgraph_msgs crazyswarm ) catkin_package ( ) include_directories ( ${ catkin_INCLUDE_DIRS } ) hello_world.py This file contains the actual script that sends the take-off, hover and land commands to the crazyfly. Copy the following into the file. \"\"\"Takeoff-hover-land for one CF. Useful to validate hardware config.\"\"\" import sys from os.path import dirname , abspath sys . path . insert ( 0 , dirname ( dirname ( dirname ( abspath ( __file__ )))) + \"/crazyswarm/scripts\" ) print ( dirname ( dirname ( dirname ( abspath ( __file__ )))) + \"/crazyswarm/scripts\" ) from pycrazyswarm import Crazyswarm TAKEOFF_DURATION = 2.5 HOVER_DURATION = 5.0 def main (): crazyflies_yaml = dirname ( dirname ( abspath ( __file__ ))) + \"/launch/crazyflies.yaml\" swarm = Crazyswarm ( crazyflies_yaml = crazyflies_yaml ) timeHelper = swarm . timeHelper cf = swarm . allcfs . crazyflies [ 0 ] cf . takeoff ( targetHeight = 1.0 , duration = TAKEOFF_DURATION ) timeHelper . sleep ( TAKEOFF_DURATION + HOVER_DURATION ) cf . land ( targetHeight = 0.04 , duration = 2.5 ) timeHelper . sleep ( TAKEOFF_DURATION ) if __name__ == \"__main__\" : main () crazyflies.yaml This file contains your vehicle definitions. To learn how to use this file check the Crazyswarm documentation . For now a simulation example is given. crazyflies : - channel : 100 id : 1 initialPosition : [ 1.5 , 1.5 , 0.0 ] type : medium Now that all the files have been edited the package can be built. This only needs to be done once to create the package as python scripts do not need to be compiled. Navigate to the crazyswarm/ros_ws folder and run the command catkin_make to build the workspace. After this the newly built workspace must be sourced. To do this run the command source devel/setup.bash . Simulation To run the simulation execute the following commands. cd ~/crazyswarm/ros_ws/src/hello_world/scripts chmod +x hello_world.py python3 hello_world.py --sim Real Experiment Before running the real experiment make sure you have properly configured the id and channel of your crazyflies in the crazyflies.yaml file. Copy the launch file used to launch the crazyswarm server. cp ~/crazyswarm/ros_ws/src/crazyswarm/launch/hover_swarm.launch ~/crazyswarm/ros_ws/src/hello_world/launch/run.launch Now recompile and resource the workspace. cd ~/crazyswarm/ros_ws catkin_make source devel/setup.bash Finally to run the experiment execute the following commands. roslaunch hello_world run.launch cd ~/crazyswarm/ros_ws/src/hello_world/scripts python3 hello_world.py","title":"Crazyswarm"},{"location":"examples/hello_world/crazyswarm/#packagexml","text":"Copy this into the package.xml file to include the needed libraries. <?xml version=\"1.0\"?> <package format= \"2\" > <name> hello_world </name> <version> 0.0.0 </version> <description> The hello_world package </description> <!-- One maintainer tag required, multiple allowed, one person per tag --> <!-- Example: --> <!-- <maintainer email=\"jane.doe@example.com\">Jane Doe</maintainer> --> <maintainer email= \"crazyuser@todo.todo\" > crazyuser </maintainer> <!-- One license tag required, multiple allowed, one license per tag --> <!-- Commonly used license strings: --> <!-- BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --> <license> TODO </license> <build_depend> message_generation </build_depend> <exec_depend> message_runtime </exec_depend> <buildtool_depend> catkin </buildtool_depend> <build_depend> rospy </build_depend> <build_depend> std_msgs </build_depend> <build_depend> geometry_msgs </build_depend> <build_depend> rosgraph_msgs </build_depend> <build_depend> vizualization_msgs </build_depend> <build_depend> crazyswarm </build_depend> <build_export_depend> rospy </build_export_depend> <build_export_depend> std_msgs </build_export_depend> <exec_depend> rospy </exec_depend> <exec_depend> std_msgs </exec_depend> <exec_depend> geometry_msgs </exec_depend> <exec_depend> rosgraph_msgs </exec_depend> <exec_depend> vizualization_msgs </exec_depend> <exec_depend> crazyswarm </exec_depend> </package>","title":"package.xml"},{"location":"examples/hello_world/crazyswarm/#cmakeliststxt","text":"Copy this into the CMakeLists.txt file to include the needed libraries. cmake_minimum_required ( VERSION 3.0.2 ) project ( hello_world ) find_package ( catkin REQUIRED COMPONENTS rospy std_msgs geometry_msgs rosgraph_msgs crazyswarm ) catkin_package ( ) include_directories ( ${ catkin_INCLUDE_DIRS } )","title":"CMakeLists.txt"},{"location":"examples/hello_world/crazyswarm/#hello_worldpy","text":"This file contains the actual script that sends the take-off, hover and land commands to the crazyfly. Copy the following into the file. \"\"\"Takeoff-hover-land for one CF. Useful to validate hardware config.\"\"\" import sys from os.path import dirname , abspath sys . path . insert ( 0 , dirname ( dirname ( dirname ( abspath ( __file__ )))) + \"/crazyswarm/scripts\" ) print ( dirname ( dirname ( dirname ( abspath ( __file__ )))) + \"/crazyswarm/scripts\" ) from pycrazyswarm import Crazyswarm TAKEOFF_DURATION = 2.5 HOVER_DURATION = 5.0 def main (): crazyflies_yaml = dirname ( dirname ( abspath ( __file__ ))) + \"/launch/crazyflies.yaml\" swarm = Crazyswarm ( crazyflies_yaml = crazyflies_yaml ) timeHelper = swarm . timeHelper cf = swarm . allcfs . crazyflies [ 0 ] cf . takeoff ( targetHeight = 1.0 , duration = TAKEOFF_DURATION ) timeHelper . sleep ( TAKEOFF_DURATION + HOVER_DURATION ) cf . land ( targetHeight = 0.04 , duration = 2.5 ) timeHelper . sleep ( TAKEOFF_DURATION ) if __name__ == \"__main__\" : main ()","title":"hello_world.py"},{"location":"examples/hello_world/crazyswarm/#crazyfliesyaml","text":"This file contains your vehicle definitions. To learn how to use this file check the Crazyswarm documentation . For now a simulation example is given. crazyflies : - channel : 100 id : 1 initialPosition : [ 1.5 , 1.5 , 0.0 ] type : medium Now that all the files have been edited the package can be built. This only needs to be done once to create the package as python scripts do not need to be compiled. Navigate to the crazyswarm/ros_ws folder and run the command catkin_make to build the workspace. After this the newly built workspace must be sourced. To do this run the command source devel/setup.bash .","title":"crazyflies.yaml"},{"location":"examples/hello_world/crazyswarm/#simulation","text":"To run the simulation execute the following commands. cd ~/crazyswarm/ros_ws/src/hello_world/scripts chmod +x hello_world.py python3 hello_world.py --sim","title":"Simulation"},{"location":"examples/hello_world/crazyswarm/#real-experiment","text":"Before running the real experiment make sure you have properly configured the id and channel of your crazyflies in the crazyflies.yaml file. Copy the launch file used to launch the crazyswarm server. cp ~/crazyswarm/ros_ws/src/crazyswarm/launch/hover_swarm.launch ~/crazyswarm/ros_ws/src/hello_world/launch/run.launch Now recompile and resource the workspace. cd ~/crazyswarm/ros_ws catkin_make source devel/setup.bash Finally to run the experiment execute the following commands. roslaunch hello_world run.launch cd ~/crazyswarm/ros_ws/src/hello_world/scripts python3 hello_world.py","title":"Real Experiment"}]}